Server:

#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <stdlib.h>
#include <netdb.h>
#include <netinet/in.h>
#include <string.h>
#include <unistd.h>

#define MAX 1000

int main() {
    int serverDescriptor = socket(AF_INET, SOCK_DGRAM, 0);
    if (serverDescriptor == -1) {
        perror("Error opening socket");
        exit(EXIT_FAILURE);
    }

    char buffer[MAX], message[] = "Command Successfully executed !";
    struct sockaddr_in clientAddress, serverAddress;
    socklen_t clientLength = sizeof(clientAddress);

    bzero(&serverAddress, sizeof(serverAddress));
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_addr.s_addr = htonl(INADDR_ANY);
    serverAddress.sin_port = htons(8079);

    if (bind(serverDescriptor, (struct sockaddr *)&serverAddress, sizeof(serverAddress)) == -1) {
        perror("Bind failed");
        close(serverDescriptor);
        exit(EXIT_FAILURE);
    }

    while (1) {
        bzero(buffer, sizeof(buffer));

        if (recvfrom(serverDescriptor, buffer, sizeof(buffer), 0, (struct sockaddr *)&clientAddress,
                    &clientLength) == -1) {
            perror("Receive failed");
            continue;  // Continue to the next iteration
        }

        // Execute the command (be cautious with user input)
        system(buffer);

        printf("Command Executed: %s\n", buffer);

        if (sendto(serverDescriptor, message, sizeof(message), 0, (struct sockaddr *)&clientAddress,
                   clientLength) == -1) {
            perror("Send failed");
        }
    }

    // Close the socket
    close(serverDescriptor);

    return 0;
}

client
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <unistd.h>

#include <netdb.h>
#include <netinet/in.h>
#include <string.h>
#include <arpa/inet.h>

#define MAX 1000

int main() {
    int clientDescriptor = socket(AF_INET, SOCK_DGRAM, 0);
    if (clientDescriptor == -1) {
        perror("Error opening socket");
        return 1;
    }

    char buffer[MAX], message[MAX];
    struct sockaddr_in cliaddr, serverAddress;
    socklen_t serverLength = sizeof(serverAddress);

    bzero(&serverAddress, sizeof(serverAddress));
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_addr.s_addr = inet_addr("127.0.0.1");
    serverAddress.sin_port = htons(8079);

    bind(clientDescriptor, (struct sockaddr *)&serverAddress, sizeof(serverAddress));

    while (1) {
        printf("\nCOMMAND FOR EXECUTION ... ");
        fgets(buffer, sizeof(buffer), stdin);
        sendto(clientDescriptor, buffer, sizeof(buffer), 0, (struct sockaddr *)&serverAddress, serverLength);
        printf("\nData Sent !");

        // Receive the response from the server
        ssize_t bytesRead = recvfrom(clientDescriptor, message, sizeof(message), 0, (struct sockaddr *)&serverAddress, &serverLength);
        if (bytesRead == -1) {
            perror("Receive failed");
        } else if (bytesRead > 0) {
            message[bytesRead] = '\0';
            printf("\nUDP SERVER : %s", message);
        } else {
            printf("\nReceived empty message or incomplete data");
        }
    }

    // Close the socket
    close(clientDescriptor);

    return 0;
}
